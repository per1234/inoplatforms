# See: https://taskfile.dev/#/usage
version: "3"

vars:
  # Path of the project's primary Go module:
  DEFAULT_GO_MODULE_PATH: ./
  DEFAULT_GO_PACKAGES:
    sh: |
      echo $(
        cd {{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}} &&
        go list ./... | tr '\n' ' ' ||
        echo '"ERROR: Unable to discover Go packages"'
      )
  # Last version of ajv-cli with support for the JSON schema "Draft 4" specification
  SCHEMA_DRAFT_4_AJV_CLI_VERSION: 3.3.0

tasks:
  check:
    desc: Check for problems with the project
    deps:
      - task: ci:validate
      - task: general:check-formatting
      - task: general:check-spelling
      - task: markdown:check-links
      - task: markdown:lint
      - task: npm:validate
      - task: poetry:validate

  fix:
    desc: Make automated corrections to the project's files
    deps:
      - task: general:correct-spelling
      - task: general:format-prettier
      - task: go:fix
      - task: go:format
      - task: go:lint
      - task: go:tidy
      - task: markdown:fix
      - task: poetry:sync

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-workflows-task/Taskfile.yml
  ci:validate:
    desc: Validate GitHub Actions workflows against their JSON schema
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/github-workflow.json
      WORKFLOW_SCHEMA_URL: https://json.schemastore.org/github-workflow
      WORKFLOW_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="workflow-schema-XXXXXXXXXX.json"
      WORKFLOWS_DATA_PATH: "./.github/workflows/*.{yml,yaml}"
    deps:
      - task: npm:install-deps
    cmds:
      - |
        wget \
          --quiet \
          --output-document="{{.WORKFLOW_SCHEMA_PATH}}" \
          {{.WORKFLOW_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -c ajv-formats \
            -s "{{.WORKFLOW_SCHEMA_PATH}}" \
            -d "{{.WORKFLOWS_DATA_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-general-formatting-task/Taskfile.yml
  general:check-formatting:
    desc: Check basic formatting style of all files
    cmds:
      - |
        go \
          install \
            github.com/editorconfig-checker/editorconfig-checker/cmd/editorconfig-checker
      - editorconfig-checker

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:check-spelling:
    desc: Check for commonly misspelled words
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run codespell

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:correct-spelling:
    desc: Correct commonly misspelled words where possible
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run codespell --write-changes

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-prettier-formatting-task/Taskfile.yml
  general:format-prettier:
    desc: Format all supported files with Prettier
    deps:
      - task: npm:install-deps
    cmds:
      - npx prettier --write .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:fix:
    desc: Modernize usages of outdated APIs
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - go fix {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:format:
    desc: Format Go code
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - go fmt {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:lint:
    desc: Lint Go code
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - |
        go \
          install \
            github.com/golangci/golangci-lint/cmd/golangci-lint
      - golangci-lint run

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:tidy:
    desc: Refresh dependency metadata
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    vars:
      GO_VERSION: 1.21
    cmds:
      - |
        go \
          mod \
            tidy \
              -compat={{.GO_VERSION}}

  docs:generate:
    desc: Create all generated documentation content
    # This is an "umbrella" task used to call any documentation generation processes the project has.
    # It can be left empty if there are none.

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:check-links:
    desc: Check for broken links
    deps:
      - task: docs:generate
      - task: npm:install-deps
    cmds:
      - |
        if [[ "{{.OS}}" == "Windows_NT" ]]; then
          # npx --call uses the native shell, which makes it too difficult to use npx for this application on Windows,
          # so the Windows user is required to have markdown-link-check installed and in PATH.
          if ! which markdown-link-check &>/dev/null; then
            echo "markdown-link-check not found or not in PATH."
            echo "Please install: https://github.com/tcort/markdown-link-check#readme"
            exit 1
          fi
          # Default behavior of the task on Windows is to exit the task when the first broken link causes a non-zero
          # exit status, but it's better to check all links before exiting.
          set +o errexit
          STATUS=0
          # Using -regex instead of -name to avoid Task's behavior of globbing even when quoted on Windows
          # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
          # \ characters special treatment on Windows in an attempt to support them as path separators.
          for file in $(
            find . \
              -type d -name '.git' -prune -o \
              -type d -name '.licenses' -prune -o \
              -type d -name '__pycache__' -prune -o \
              -type d -name 'node_modules' -prune -o \
              -regex ".*[.]md" -print
          ); do
            markdown-link-check \
              --quiet \
              --config "./.markdown-link-check.json" \
              "$file"
            STATUS=$(( $STATUS + $? ))
          done
          exit $STATUS
        else
          npx --package=markdown-link-check --call='
            STATUS=0
            for file in $(
              find . \
                -type d -name '.git' -prune -o \
                -type d -name '.licenses' -prune -o \
                -type d -name '__pycache__' -prune -o \
                -type d -name 'node_modules' -prune -o \
                -regex ".*[.]md" -print
            ); do
              markdown-link-check \
                --quiet \
                --config "./.markdown-link-check.json" \
                "$file"
              STATUS=$(( $STATUS + $? ))
            done
            exit $STATUS
          '
        fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:fix:
    desc: Automatically correct linting violations in Markdown files where possible
    deps:
      - task: npm:install-deps
    cmds:
      - npx markdownlint-cli --fix "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:lint:
    desc: Check for problems in Markdown files
    deps:
      - task: npm:install-deps
    cmds:
      - npx markdownlint-cli "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/npm-task/Taskfile.yml
  npm:install-deps:
    desc: Install dependencies managed by npm
    cmds:
      - npm install

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-npm-task/Taskfile.yml
  npm:validate:
    desc: Validate npm configuration files against their JSON schema
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/package.json
      SCHEMA_URL: https://json.schemastore.org/package.json
      SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="package-json-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/ava.json
      AVA_SCHEMA_URL: https://json.schemastore.org/ava.json
      AVA_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="ava-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/eslintrc.json
      ESLINTRC_SCHEMA_URL: https://json.schemastore.org/eslintrc.json
      ESLINTRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="eslintrc-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/jscpd.json
      JSCPD_SCHEMA_URL: https://json.schemastore.org/jscpd.json
      JSCPD_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="jscpd-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/npm-badges.json
      NPM_BADGES_SCHEMA_URL: https://json.schemastore.org/npm-badges.json
      NPM_BADGES_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="npm-badges-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/prettierrc.json
      PRETTIERRC_SCHEMA_URL: https://json.schemastore.org/prettierrc.json
      PRETTIERRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="prettierrc-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/semantic-release.json
      SEMANTIC_RELEASE_SCHEMA_URL: https://json.schemastore.org/semantic-release.json
      SEMANTIC_RELEASE_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="semantic-release-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/stylelintrc.json
      STYLELINTRC_SCHEMA_URL: https://json.schemastore.org/stylelintrc.json
      STYLELINTRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="stylelintrc-schema-XXXXXXXXXX.json"
      INSTANCE_PATH: "**/package.json"
      PROJECT_FOLDER:
        sh: pwd
      WORKING_FOLDER:
        sh: task utility:mktemp-folder TEMPLATE="dependabot-validate-XXXXXXXXXX"
    cmds:
      - wget --quiet --output-document="{{.SCHEMA_PATH}}" {{.SCHEMA_URL}}
      - wget --quiet --output-document="{{.AVA_SCHEMA_PATH}}" {{.AVA_SCHEMA_URL}}
      - wget --quiet --output-document="{{.ESLINTRC_SCHEMA_PATH}}" {{.ESLINTRC_SCHEMA_URL}}
      - wget --quiet --output-document="{{.JSCPD_SCHEMA_PATH}}" {{.JSCPD_SCHEMA_URL}}
      - wget --quiet --output-document="{{.NPM_BADGES_SCHEMA_PATH}}" {{.NPM_BADGES_SCHEMA_URL}}
      - wget --quiet --output-document="{{.PRETTIERRC_SCHEMA_PATH}}" {{.PRETTIERRC_SCHEMA_URL}}
      - wget --quiet --output-document="{{.SEMANTIC_RELEASE_SCHEMA_PATH}}" {{.SEMANTIC_RELEASE_SCHEMA_URL}}
      - wget --quiet --output-document="{{.STYLELINTRC_SCHEMA_PATH}}" {{.STYLELINTRC_SCHEMA_URL}}
      - |
        cd "{{.WORKING_FOLDER}}"  # Workaround for https://github.com/npm/cli/issues/3210
        npx ajv-cli@{{.SCHEMA_DRAFT_4_AJV_CLI_VERSION}} validate \
          --all-errors \
          -s "{{.SCHEMA_PATH}}" \
          -r "{{.AVA_SCHEMA_PATH}}" \
          -r "{{.ESLINTRC_SCHEMA_PATH}}" \
          -r "{{.JSCPD_SCHEMA_PATH}}" \
          -r "{{.NPM_BADGES_SCHEMA_PATH}}" \
          -r "{{.PRETTIERRC_SCHEMA_PATH}}" \
          -r "{{.SEMANTIC_RELEASE_SCHEMA_PATH}}" \
          -r "{{.STYLELINTRC_SCHEMA_PATH}}" \
          -d "{{.PROJECT_FOLDER}}/{{.INSTANCE_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:install-deps:
    desc: Install dependencies managed by Poetry
    cmds:
      - poetry install --no-root

  poetry:validate:
    desc: Validate pyproject.toml
    cmds:
      - |
        poetry \
          check \
            --lock

  poetry:sync:
    desc: Sync poetry.lock
    cmds:
      - |
        poetry \
          lock \
            --no-update

  # Make a temporary file named according to the passed TEMPLATE variable and print the path passed to stdout
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:mktemp-file:
    vars:
      RAW_PATH:
        sh: mktemp --tmpdir "{{.TEMPLATE}}"
    cmds:
      - task: utility:normalize-path
        vars:
          RAW_PATH: "{{.RAW_PATH}}"

  # Make a temporary folder named according to the passed TEMPLATE variable and print the path passed to stdout
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:mktemp-folder:
    vars:
      RAW_PATH:
        sh: mktemp --directory --tmpdir "{{.TEMPLATE}}"
    cmds:
      - task: utility:normalize-path
        vars:
          RAW_PATH: "{{.RAW_PATH}}"

  # Print a normalized version of the path passed via the RAW_PATH variable to stdout
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:normalize-path:
    cmds:
      - |
        if [[ "{{.OS}}" == "Windows_NT" ]] && which cygpath &>/dev/null; then
            # Even though the shell handles POSIX format absolute paths as expected, external applications do not.
            # So paths passed to such applications must first be converted to Windows format.
            cygpath -w "{{.RAW_PATH}}"
        else
          echo "{{.RAW_PATH}}"
        fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-yaml-task/Taskfile.yml
  yaml:lint:
    desc: Check for problems with YAML files
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run yamllint --format {{default "colored" .YAMLLINT_FORMAT}} .
